# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>

# globals: qt, QWebChannel

bridge = None
channel = None
bridge_name = 'Í»-qt-js-bridge'


def qt_bridge():
    return bridge

def callback(name, data, console_err):
    bridge = qt_bridge()
    if not bridge:
        console.error(console_err or ('Aborting callback: ' + name + ' as Qt bridge not available'))
    else:
        bridge.callback(name, JSON.stringify(data))

def connect_signal(name, func):
    bridge = qt_bridge()
    if not bridge:
        console.error('Failed to connect signal: ' + name + ' as Qt bridge not available')
    else:
        signal = bridge[name]
        if not signal:
            console.error('Failed to connect signal: ' + name + ' as no signal by that name exists')
        else:
            signal.connect(func)

def connect_bridge(proceed):
    nonlocal channel
    if window.self != window.top:
        proceed()
        return  # Do not connect in child frames
    channel = new QWebChannel(qt.webChannelTransport, def(channel):
        nonlocal bridge
        bridge = channel.objects.bridge
        Object.defineProperty(window, bridge_name, {'value':bridge})
        proceed()
    )
